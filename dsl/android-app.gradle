apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "com.github.ben-manes.versions"   // dependencies version check
//apply plugin: 'io.fabric'                       // Crash reporting.

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId app_application_id_base
        minSdkVersion 21
        targetSdkVersion 29
        versionCode build_number
        versionName app_version_name
        multiDexEnabled true

        if (android_studio) {
            resConfigs "ja", android_assemble_dpi
        } else {
            resConfigs "ja"
        }

        buildConfigField "String", "BUILD_DATE", "\"$build_date\""
        buildConfigField "int", "BUILD_NUMBER", "$build_number"
        buildConfigField "boolean", "BUILD_FROM_CI", "$build_on_ci"
        buildConfigField "boolean", "RELEASE", "!DEBUG"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                google_api_key: "@string/google_api_key"
        ]
    }

    sourceSets {
        androidTest.java.srcDirs += ["src/test/java"]
    }

    // for *.java options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // for Kotlin-Android
    androidExtensions {
        experimental = true
        features = ["parcelize"]
    }

    dataBinding {
        enabled = true
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    packagingOptions {
        exclude 'META-INF/**_debug.kotlin_module'
        pickFirst 'META-INF/atomicfu.kotlin_module'
    }

    buildTypes {
        /**
         * Debug configuration.
         */
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
            ext.alwaysUpdateBuildId = false
//            signingConfig signingConfigs.debug
        }

        /**
         * Release configuration.
         * Shrink with R8, Proguard has been ignored.
         */
        release {
            minifyEnabled true
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/**.properties'
        exclude 'META-INF/**.version'
        exclude 'META-INF/**.kotlin_module'
        exclude 'META-INF/**.pro'
        exclude 'META-INF/services/*.*'
        exclude 'kotlin/**'
        exclude "kotlinx/**"
        exclude 'okhttp3/**'
        exclude "**/**annotations.gwt.xml"
        exclude "**/**-setter_store.bin"
        exclude "**/**-layoutinfo.bin"
        exclude "**/**-br.bin"
        exclude "build-data.properties"
        exclude "protobuf.meta"
        exclude "org/apache/http/version.properties"
        exclude "/*.properties"
        exclude '/fabric/**'
        exclude '/*.txt'
    }

    dexOptions {
        if (build_on_ci) {
            println "apply dex options [${dex_max_heap_on_ci}] for CI in ${project.name}"
            javaMaxHeapSize = "${dex_max_heap_on_ci}"
        }
        if (!android_studio) {
            println "apply dex options for Terminal in ${project.name}"
            preDexLibraries = false
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true  // support robolectric
        }
    }
}

dependencies {
    kapt("androidx.lifecycle:lifecycle-compiler:2.1.0-beta01")

    /**
     * for Tests (or Android Tests)
     */
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation "org.mockito:mockito-core:2.27.0"
    testImplementation("net.bytebuddy:byte-buddy:1.8.15")
    androidTestImplementation("net.bytebuddy:byte-buddy:1.8.15")

    androidTestImplementation "org.mockito:mockito-core:2.27.0"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:2.25.0"
    androidTestImplementation 'androidx.multidex:multidex:2.0.1'
    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'
    testImplementation("com.eaglesakura.armyknife.armyknife-android-junit4:armyknife-android-junit4:1.3.2") {
        exclude(group: "org.mockito", module: "mockito-core")
        exclude(group: "androidx.activity")
    }
    androidTestImplementation("com.eaglesakura.armyknife.armyknife-android-junit4:armyknife-android-junit4:1.3.2") {
        exclude(group: "org.mockito", module: "mockito-core")
        exclude(group: "androidx.activity")
    }
}

//apply plugin: 'com.google.gms.google-services'
